/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package cl.commander.micro_inventory.controller;

import cl.commander.micro_inventory.viewmodel.GenericResponse;
import cl.commander.micro_inventory.viewmodel.ProductRequest;
import cl.commander.micro_inventory.viewmodel.ProductResponse;
import cl.commander.micro_inventory.viewmodel.ProductsResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "Product", description = "the Product API")
public interface ProductApi {

    /**
     * DELETE /inventory/v1/user/{idUser}/product/{idProduct} : delete the product detail with your id stored in inventory
     * delete the product detail with your id
     *
     * @param idProduct product identifier (required)
     * @param idUser User identifier (required)
     * @return operation ok (status code 200)
     *         or Bad Request (status code 400)
     *         or unauthorized (status code 401)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     *         or Service Unavalable (status code 505)
     */
    @ApiOperation(value = "delete the product detail with your id stored in inventory", nickname = "deleteProduct", notes = "delete the product detail with your id", response = ProductResponse.class, tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "operation ok", response = GenericResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = GenericResponse.class),
        @ApiResponse(code = 401, message = "unauthorized", response = GenericResponse.class),
        @ApiResponse(code = 404, message = "Not Found", response = GenericResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = GenericResponse.class),
        @ApiResponse(code = 505, message = "Service Unavalable", response = GenericResponse.class) })
    @RequestMapping(value = "/inventory/v1/user/{idUser}/product/{idProduct}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<GenericResponse> deleteProduct(@ApiParam(value = "product identifier",required=true) @PathVariable("idProduct") String idProduct,@ApiParam(value = "User identifier",required=true) @PathVariable("idUser") String idUser);


    /**
     * GET /inventory/v1/user/{idUser}/product/{idProduct} : get the product detail with your id stored in inventory
     * get the product detail with your id
     *
     * @param idProduct product identifier (required)
     * @param idUser User identifier (required)
     * @return operation ok (status code 200)
     *         or Bad Request (status code 400)
     *         or unauthorized (status code 401)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     *         or Service Unavalable (status code 505)
     */
    @ApiOperation(value = "get the product detail with your id stored in inventory", nickname = "getProduct", notes = "get the product detail with your id", response = ProductResponse.class, tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "operation ok", response = ProductResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = GenericResponse.class),
        @ApiResponse(code = 401, message = "unauthorized", response = GenericResponse.class),
        @ApiResponse(code = 404, message = "Not Found", response = GenericResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = GenericResponse.class),
        @ApiResponse(code = 505, message = "Service Unavalable", response = GenericResponse.class) })
    @RequestMapping(value = "/inventory/v1/user/{idUser}/product/{idProduct}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ProductResponse> getProduct(@ApiParam(value = "product identifier",required=true) @PathVariable("idProduct") String idProduct,@ApiParam(value = "User identifier",required=true) @PathVariable("idUser") String idUser);


    /**
     * GET /inventory/v1/user/{idUser}/product/category/{idCategory} : get the products detail with your idCategory stored in inventory
     * get the products detail with your idCategory
     *
     * @param idCategory Category identifier (required)
     * @param idUser User identifier (required)
     * @return operation ok (status code 200)
     *         or Bad Request (status code 400)
     *         or unauthorized (status code 401)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     *         or Service Unavalable (status code 505)
     */
    @ApiOperation(value = "get the products detail with your idCategory stored in inventory", nickname = "getProductByCategory", notes = "get the products detail with your idCategory", response = ProductsResponse.class, tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "operation ok", response = ProductsResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = GenericResponse.class),
        @ApiResponse(code = 401, message = "unauthorized", response = GenericResponse.class),
        @ApiResponse(code = 404, message = "Not Found", response = GenericResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = GenericResponse.class),
        @ApiResponse(code = 505, message = "Service Unavalable", response = GenericResponse.class) })
    @RequestMapping(value = "/inventory/v1/user/{idUser}/product/category/{idCategory}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ProductsResponse> getProductByCategory(@ApiParam(value = "Category identifier",required=true) @PathVariable("idCategory") String idCategory,@ApiParam(value = "User identifier",required=true) @PathVariable("idUser") String idUser);


    /**
     * GET /inventory/v1/user/{idUser}/product/category/{idCategory}/supplier/{idSupplier} : get the products detail with your CategoryIdAndSupplierId stored in inventory
     * get the products detail with your CategoryIdAndSupplierId
     *
     * @param idCategory Category identifier (required)
     * @param idSupplier Supplier identifier (required)
     * @param idUser User identifier (required)
     * @return operation ok (status code 200)
     *         or Bad Request (status code 400)
     *         or unauthorized (status code 401)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     *         or Service Unavalable (status code 505)
     */
    @ApiOperation(value = "get the products detail with your CategoryIdAndSupplierId stored in inventory", nickname = "getProductByCategoryAndSupplier", notes = "get the products detail with your CategoryIdAndSupplierId", response = ProductsResponse.class, tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "operation ok", response = ProductsResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = GenericResponse.class),
        @ApiResponse(code = 401, message = "unauthorized", response = GenericResponse.class),
        @ApiResponse(code = 404, message = "Not Found", response = GenericResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = GenericResponse.class),
        @ApiResponse(code = 505, message = "Service Unavalable", response = GenericResponse.class) })
    @RequestMapping(value = "/inventory/v1/user/{idUser}/product/category/{idCategory}/supplier/{idSupplier}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ProductsResponse> getProductByCategoryAndSupplier(@ApiParam(value = "Category identifier",required=true) @PathVariable("idCategory") String idCategory,@ApiParam(value = "Supplier identifier",required=true) @PathVariable("idSupplier") String idSupplier,@ApiParam(value = "User identifier",required=true) @PathVariable("idUser") String idUser);


    /**
     * GET /inventory/v1/user/{idUser}/product/supplier/{idSupplier} : get the products detail with your idSupplier stored in inventory
     * get the products detail with your idSupplier
     *
     * @param idSupplier Supplier identifier (required)
     * @param idUser User identifier (required)
     * @return operation ok (status code 200)
     *         or Bad Request (status code 400)
     *         or unauthorized (status code 401)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     *         or Service Unavalable (status code 505)
     */
    @ApiOperation(value = "get the products detail with your idSupplier stored in inventory", nickname = "getProductBySupplier", notes = "get the products detail with your idSupplier", response = ProductsResponse.class, tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "operation ok", response = ProductsResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = GenericResponse.class),
        @ApiResponse(code = 401, message = "unauthorized", response = GenericResponse.class),
        @ApiResponse(code = 404, message = "Not Found", response = GenericResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = GenericResponse.class),
        @ApiResponse(code = 505, message = "Service Unavalable", response = GenericResponse.class) })
    @RequestMapping(value = "/inventory/v1/user/{idUser}/product/supplier/{idSupplier}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ProductsResponse> getProductBySupplier(@ApiParam(value = "Supplier identifier",required=true) @PathVariable("idSupplier") String idSupplier,@ApiParam(value = "User identifier",required=true) @PathVariable("idUser") String idUser);


    /**
     * GET /inventory/v1/user/{idUser}/product : get all products stored in inventory
     * keep the product in inventory
     *
     * @param idUser User identifier (required)
     * @return operation ok (status code 200)
     *         or Bad Request (status code 400)
     *         or unauthorized (status code 401)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     *         or Service Unavalable (status code 505)
     */
    @ApiOperation(value = "get all products stored in inventory", nickname = "getProducts", notes = "keep the product in inventory", response = ProductsResponse.class, tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "operation ok", response = ProductsResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = GenericResponse.class),
        @ApiResponse(code = 401, message = "unauthorized", response = GenericResponse.class),
        @ApiResponse(code = 404, message = "Not Found", response = GenericResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = GenericResponse.class),
        @ApiResponse(code = 505, message = "Service Unavalable", response = GenericResponse.class) })
    @RequestMapping(value = "/inventory/v1/user/{idUser}/product",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ProductsResponse> getProducts(@ApiParam(value = "User identifier",required=true) @PathVariable("idUser") String idUser);


    /**
     * POST /inventory/v1/user/{idUser}/product : keep the product in inventory
     * keep the product in inventory
     *
     * @param idUser User identifier (required)
     * @param productRequest Product object that needs to be added to the inventory (optional)
     * @return operation ok (status code 200)
     *         or Bad Request (status code 400)
     *         or unauthorized (status code 401)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     *         or Service Unavalable (status code 505)
     */
    @ApiOperation(value = "keep the product in inventory", nickname = "postProduct", notes = "keep the product in inventory", response = GenericResponse.class, tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "operation ok", response = GenericResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = GenericResponse.class),
        @ApiResponse(code = 401, message = "unauthorized", response = GenericResponse.class),
        @ApiResponse(code = 404, message = "Not Found", response = GenericResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = GenericResponse.class),
        @ApiResponse(code = 505, message = "Service Unavalable", response = GenericResponse.class) })
    @RequestMapping(value = "/inventory/v1/user/{idUser}/product",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<GenericResponse> postProduct(@ApiParam(value = "User identifier",required=true) @PathVariable("idUser") String idUser,@ApiParam(value = "Product object that needs to be added to the inventory"  )  @Valid @RequestBody(required = false) ProductRequest productRequest);


    /**
     * PUT /inventory/v1/user/{idUser}/product/{idProduct} : update the product in inventory
     * keep the product in inventory
     *
     * @param idUser User identifier (required)
     * @param idProduct product identifier (required)
     * @param productRequest Product object that needs to be added to the inventory (optional)
     * @return operation ok (status code 200)
     *         or Bad Request (status code 400)
     *         or unauthorized (status code 401)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     *         or Service Unavalable (status code 505)
     */
    @ApiOperation(value = "update the product in inventory", nickname = "putProduct", notes = "keep the product in inventory", response = GenericResponse.class, tags={ "Product", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "operation ok", response = GenericResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = GenericResponse.class),
        @ApiResponse(code = 401, message = "unauthorized", response = GenericResponse.class),
        @ApiResponse(code = 404, message = "Not Found", response = GenericResponse.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = GenericResponse.class),
        @ApiResponse(code = 505, message = "Service Unavalable", response = GenericResponse.class) })
    @RequestMapping(value = "/inventory/v1/user/{idUser}/product/{idProduct}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<GenericResponse> putProduct(@ApiParam(value = "User identifier",required=true) @PathVariable("idUser") String idUser,@ApiParam(value = "product identifier",required=true) @PathVariable("idProduct") String idProduct,@ApiParam(value = "Product object that needs to be added to the inventory"  )  @Valid @RequestBody(required = false) ProductRequest productRequest);

}
